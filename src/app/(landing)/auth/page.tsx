"use client";

import Image from "next/image";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { createClient } from "~/utils/supabase/client";

import { BotMessage } from "../chat/_components/bot-message";
import { Chat } from "../chat/_components/chat";
import { GradientBackground } from "../chat/_components/gradient-background";
import { UserMessage } from "../chat/_components/user-message";
import { AuthInput } from "./_components/auth-input";

// Logique d'authentification (√©quivalent √† ChatLogic)
function AuthLogic() {
	const router = useRouter();
	const supabase = createClient();
	
	const [authStep, setAuthStep] = useState<'welcome' | 'email' | 'password' | 'signup'>('welcome');
	const [authData, setAuthData] = useState({
		email: '',
		password: '',
		isExistingUser: false
	});
	const [isLoading, setIsLoading] = useState(false);
	
	// Messages d'authentification (√©quivalent √† allMessages)
	const [authMessages, setAuthMessages] = useState<Array<{
		id: string;
		role: 'user' | 'assistant';
		content: string;
	}>>([
		{
			id: 'auth-welcome',
			role: 'assistant' as const,
			content: 'Bonjour ! Je suis Neiji, votre assistant de m√©ditation. Pour acc√©der √† toutes les fonctionnalit√©s, souhaitez-vous vous connecter ?'
		}
	]);

	// Auto-scroll (m√™me logique que le chat)
	useEffect(() => {
		let intervalId: NodeJS.Timeout | null = null;

		const scrollToBottom = () => {
			window.scrollTo({
				top: document.documentElement.scrollHeight,
				behavior: "smooth",
			});
		};

		// Start auto-scrolling when loading
		if (isLoading) {
			scrollToBottom();
			intervalId = setInterval(scrollToBottom, 100);
		}

		return () => {
			if (intervalId) {
				clearInterval(intervalId);
			}
		};
	}, [isLoading]);

	const addMessage = (role: 'user' | 'assistant', content: string) => {
		const newMessage = {
			id: `auth-${Date.now()}-${Math.random()}`,
			role,
			content
		};
		setAuthMessages((prev) => [...prev, newMessage]);
		return newMessage;
	};	// Fonction pour d√©tecter si l'utilisateur veut se connecter
	const detectPositiveResponse = (input: string): boolean => {
		const normalizedInput = input.toLowerCase().trim();
		console.log('‚úÖ D√©but d√©tection positive pour:', `"${normalizedInput}"`);
		
		// Test le plus simple d'abord - juste "oui"
		if (normalizedInput === 'oui') {
			console.log('‚úÖ Match exact "oui" trouv√©');
			return true;
		}
		
		// Variantes de "oui" en fran√ßais (sans les mots ambigus)
		const positiveVariants = [
			'ui', 'oiu', 'ouai', 'ouais', 'ouaip', 'ok', 'okay', 'okey',
			'yes', 'yep', 'yeah', 'yess', 'ye', 'bien', 'parfait',
			'daccord', "d'accord", 'dacord', 'vas-y', 'vas y', 'go', 'gogogo',
			'connect', 'connexion', 'connecter', 'login', 'signin', 'sign in',
			'connecte', 'connect√©', 'je veux', 'jveux', 'allons-y', 'allez',
			'bien sur', 'bien s√ªr', 'evidemment', '√©videmment', 'of course',
			'pourquoi pas', 'why not', 'avec plaisir', 'volontiers', 'banco'
		];

		// V√©rifier si l'input correspond √† une variante
		for (const variant of positiveVariants) {
			if (normalizedInput === variant) {
				console.log('‚úÖ Match positif exact trouv√©:', variant);
				return true;
			}
			if (normalizedInput.includes(variant)) {
				console.log('‚úÖ Match positif par inclusion trouv√©:', variant);
				return true;
			}
			// G√©rer les fautes de frappe courantes avec distance de Levenshtein simple
			if (variant.length > 2 && isCloseMatch(normalizedInput, variant)) {
				console.log('‚úÖ Match positif fuzzy trouv√©:', variant);
				return true;
			}
		}
		
		console.log('‚úÖ Aucun match positif trouv√©');
		return false;
	};// Fonction pour d√©tecter si l'utilisateur refuse de se connecter
	const detectNegativeResponse = (input: string): boolean => {
		const normalizedInput = input.toLowerCase().trim();
		console.log('üö´ D√©but d√©tection n√©gative pour:', `"${normalizedInput}"`);
		
		// Test le plus simple d'abord - juste "non"
		if (normalizedInput === 'non') {
			console.log('üö´ Match exact "non" trouv√©');
			return true;
		}
		
		// Variantes de "non" en fran√ßais et anglais - v√©rification stricte d'abord
		const negativeVariants = [
			'no', 'nop', 'nope', 'nn', 'nah', 'nan', 'naan', 'niet', 'nein',
			'pas', 'jamais', 'never', 'pas question', 'hors de question', 'aucun',
			'refuse', 'refus', 'decline', 'skip', 'passer', 'plus tard',
			'later', 'not now', 'pas maintenant', 'pas envie', 'bof', 'mouais',
			'non merci', 'no thanks', 'no thank you', '√ßa va', 'ca va', '√ßa ira',
			'leave', 'quit', 'exit', 'sortir', 'partir', 'retour', 'back',
			'annuler', 'cancel', 'abort', 'stop', 'arr√™t', 'arret'
		];

		// Test strict d'abord (correspondance exacte et inclusion)
		for (const variant of negativeVariants) {
			if (normalizedInput === variant) {
				console.log('üö´ Match exact trouv√©:', variant);
				return true;
			}
			if (normalizedInput.includes(variant)) {
				console.log('üö´ Match par inclusion trouv√©:', variant);
				return true;
			}
		}

		// Puis test avec Levenshtein seulement pour les mots longs
		for (const variant of negativeVariants) {
			if (variant.length > 3 && isCloseMatch(normalizedInput, variant)) {
				console.log('üö´ Match fuzzy trouv√©:', variant);
				return true;
			}
		}
		
		console.log('üö´ Aucun match n√©gatif trouv√©');
		return false;
	};

	// Fonction simple pour d√©tecter les fautes de frappe (distance de 1-2 caract√®res)
	const isCloseMatch = (input: string, target: string): boolean => {
		if (Math.abs(input.length - target.length) > 2) return false;
		
		const shorter = input.length < target.length ? input : target;
		const longer = input.length >= target.length ? input : target;
		
		let differences = 0;
		let i = 0, j = 0;
		
		while (i < shorter.length && j < longer.length) {
			if (shorter[i] !== longer[j]) {
				differences++;
				if (differences > 2) return false;
				
				// Essayer de sauter un caract√®re dans la cha√Æne plus longue
				if (i + 1 < shorter.length && shorter[i + 1] === longer[j]) {
					i++;
				} else if (j + 1 < longer.length && shorter[i] === longer[j + 1]) {
					j++;
				} else {
					i++;
					j++;
				}
			} else {
				i++;
				j++;
			}
		}
		
		differences += Math.abs(longer.length - shorter.length);
		return differences <= 2;
	};	const handleUserInput = async (input: string) => {
		// Ajouter le message utilisateur
		addMessage('user', input);
		setIsLoading(true);

		// Debug: afficher les d√©tections
		console.log('üîç === DEBUT DEBUG ===');
		console.log('üîç Input original:', `"${input}"`);
		console.log('üîç Input normalis√©:', `"${input.toLowerCase().trim()}"`);
		console.log('üîç AuthStep actuel:', authStep);
		
		const normalizedInput = input.toLowerCase().trim();
		const isPositive = detectPositiveResponse(input);
		const isNegative = detectNegativeResponse(input);
		
		console.log('üîç R√©sultat d√©tection positive:', isPositive);
		console.log('üîç R√©sultat d√©tection n√©gative:', isNegative);
		
		// Test manuel pour "non"
		if (normalizedInput === 'non') {
			console.log('üîç TEST MANUEL: "non" d√©tect√© directement');
		}
		
		console.log('üîç === FIN DEBUG ===');
				try {
			if (authStep === 'welcome') {
				// Test ultra-simple pour "non" en premier
				if (normalizedInput === 'non') {
					console.log('üéØ DETECTION DIRECTE: "non" trouv√© - redirection imm√©diate');
					addMessage('assistant', 'Tr√®s bien ! Je vous redirige vers le chat principal. √Ä bient√¥t ! üëã');
					setTimeout(() => {
						router.push('/chat');
					}, 2000);
					return;
				}
				
				// Puis les d√©tections normales
				if (isNegative) {
					console.log('‚úÖ NEGATIVE d√©tect√© - redirection vers chat');
					addMessage('assistant', 'Tr√®s bien ! Je vous redirige vers le chat principal. √Ä bient√¥t ! üëã');
					setTimeout(() => {
						router.push('/chat');
					}, 2000);
					return; // Important: arr√™ter l'ex√©cution ici
				} else if (isPositive) {
					console.log('‚úÖ POSITIVE d√©tect√© - passage √† email');
					addMessage('assistant', 'Parfait ! Quelle est votre adresse email ?');
					setAuthStep('email');
				} else {
					console.log('‚ùì NEITHER d√©tect√© - demande clarification');
					addMessage('assistant', 'Je n\'ai pas bien compris votre r√©ponse. Souhaitez-vous vous connecter ? R√©pondez par "oui" pour vous connecter ou "non" pour continuer en mode invit√©.');
				}
			}else if (authStep === 'email') {
				const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
				if (!emailRegex.test(input)) {
					addMessage('assistant', 'Hmm, cet email ne semble pas valide. Pouvez-vous le retaper ? (exemple: nom@exemple.com)');
					return;
				}

				setAuthData(prev => ({ ...prev, email: input }));

				const { data: existingUser } = await supabase
					.from('users_table')
					.select('email')
					.eq('email', input)
					.single();

				if (existingUser) {
					setAuthData(prev => ({ ...prev, isExistingUser: true }));
					addMessage('assistant', `Bonjour ! Je vous reconnais. Quel est votre mot de passe ?`);
					setAuthStep('password');
				} else {
					setAuthData(prev => ({ ...prev, isExistingUser: false }));
					addMessage('assistant', `Je ne vous connais pas encore ! Cr√©ons votre compte. Choisissez un mot de passe s√©curis√© (au moins 8 caract√®res avec lettres et chiffres).`);
					setAuthStep('signup');
				}
			} else if (authStep === 'password') {
				const { error } = await supabase.auth.signInWithPassword({
					email: authData.email,
					password: input
				});

				if (error) {
					addMessage('assistant', 'Oups ! Ce mot de passe ne correspond pas. Pouvez-vous r√©essayer ?');
				} else {
					addMessage('assistant', 'Parfait ! Connexion r√©ussie. Bienvenue dans votre espace personnel ! üéâ');
					setTimeout(() => {
						router.push('/protected/chat');
					}, 2000);
				}
			} else if (authStep === 'signup') {
				if (input.length < 8) {
					addMessage('assistant', 'Ce mot de passe est trop court. Il doit contenir au moins 8 caract√®res. Essayez encore !');
					return;
				}
				if (!/(?=.*[a-zA-Z])(?=.*\d)/.test(input)) {
					addMessage('assistant', 'Votre mot de passe doit contenir √† la fois des lettres et des chiffres pour plus de s√©curit√©. R√©essayez !');
					return;
				}

				const { error } = await supabase.auth.signUp({
					email: authData.email,
					password: input
				});

				if (error) {
					addMessage('assistant', `D√©sol√©, il y a eu un probl√®me : ${error.message}. Pouvez-vous r√©essayer ?`);
				} else {
					addMessage('assistant', 'Excellent ! Votre compte a √©t√© cr√©√©. Bienvenue dans la communaut√© Neiji ! üåü');
					setTimeout(() => {
						router.push('/protected/chat');
					}, 2000);
				}
			}
		} catch (error) {
			addMessage('assistant', 'Oups ! Il y a eu un petit probl√®me technique. Pouvez-vous r√©essayer ?');
		} finally {
			setIsLoading(false);
		}
	};
	return (
		<Chat>
			<div className="container relative z-0 mx-auto space-y-4 px-4 pt-8 pb-30 sm:px-6">
				{authMessages.length === 0 ? (
					<div className="flex h-full flex-col items-center justify-center gap-4 pt-40 text-center">
						<Image
							src="/logo-neiji-full.png"
							alt="Neiji Logo"
							width={120}
							height={120}
						/>
						<p className="mx-auto max-w-md px-4 text-lg text-muted-foreground">
							Connexion √† votre espace personnel Neiji
						</p>
					</div>
				) : (
					authMessages.map((message, index) => {
						if (message.role === "user") {
							return (
								<UserMessage key={message.id}>{message.content}</UserMessage>
							);
						}

						if (isLoading && index === authMessages.length - 1) {
							return null;
						}

						return <BotMessage key={message.id} message={message} />;
					})
				)}
			</div>
			
			{/* AuthInput remplace ChatInput */}
			<AuthInput
				onSend={handleUserInput}
				disabled={isLoading}
				isPassword={authStep === 'password' || authStep === 'signup'}
				placeholder={
					authStep === 'welcome' ? "Tapez 'oui' pour vous connecter..." :
					authStep === 'email' ? "Votre adresse email..." :
					authStep === 'password' ? "Votre mot de passe..." :
					authStep === 'signup' ? "Choisissez un mot de passe..." :
					"Tapez votre message..."
				}
				onFocus={() => {
					if (authMessages.length === 1) {
						// Trigger welcome message if needed
					}
				}}
			/>
		</Chat>
	);
}

export default function AuthPage() {
	return (
		<GradientBackground>
			<AuthLogic />
		</GradientBackground>
	);
}
