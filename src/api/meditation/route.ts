import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import { MeditationAIAgent } from "~/lib/meditation/ai-agent";
import { generateConcatenatedMeditation } from "~/lib/meditation/generate-concatenated-meditation";

const meditationSchema = z.object({
  duration: z.number().min(0.5).max(30).optional().default(5), // Permet 0.5 minute (30 secondes) pour les tests
  prompt: z.string().min(1).max(500),
  voiceId: z.string().optional().default('g6xIsTj2HwM6VR4iXFCw'),
  background: z.enum(['silence', 'waves', 'rain', 'focus', 'relax']).optional().default('silence'),
  guidance: z.enum(['beginner', 'confirmed', 'expert']).optional().default('confirmed'),
  goal: z.enum(['morning', 'focus', 'calm', 'sleep']).optional().default('calm'),
  gender: z.enum(['male', 'female']).optional().default('female'),
});

/**
 * G√©n√®re des segments de m√©ditation optimis√©s pour la dur√©e demand√©e
 */
function generateOptimizedSegments(duration: number, goal: string) {
  const totalDurationSeconds = duration * 60;
  
  // Templates optimis√©s selon la dur√©e
  let template;
  if (duration <= 2) {
    // M√©ditation courte : focus sur l'essentiel
    template = [
      { type: 'intro', content: `Bienvenue dans cette m√©ditation de ${duration} minutes. Installez-vous confortablement et fermez les yeux.`, textRatio: 0.6, pauseAfter: 2 },
      { type: 'breathing', content: `Portez votre attention sur votre respiration naturelle. Inspirez profond√©ment par le nez, puis expirez lentement par la bouche. Laissez votre souffle vous ancrer dans l'instant pr√©sent.`, textRatio: 0.5, pauseAfter: 8 },
      { type: 'body_scan', content: `Maintenant, d√©tendez progressivement chaque partie de votre corps. Commencez par le sommet de votre t√™te, puis vos √©paules, vos bras, votre torse, et vos jambes. Rel√¢chez toutes les tensions.`, textRatio: 0.5, pauseAfter: 6 },
      { type: 'visualization', content: `Imaginez-vous dans un lieu paisible et s√©curisant. Peut-√™tre une plage, une for√™t, ou simplement votre endroit pr√©f√©r√©. Ressentez la paix et la s√©r√©nit√© de ce lieu.`, textRatio: 0.5, pauseAfter: 8 },
      { type: 'conclusion', content: `Revenez doucement √† l'instant pr√©sent. Bougez d√©licatement vos doigts et vos orteils. Quand vous √™tes pr√™t, ouvrez les yeux. Vous vous sentez calme et d√©tendu.`, textRatio: 0.6, pauseAfter: 2 }
    ];
  } else if (duration <= 5) {
    // M√©ditation moyenne : √©quilibre texte/pauses
    template = [
      { type: 'intro', content: `Bienvenue dans cette m√©ditation de ${duration} minutes. Installez-vous confortablement dans une position qui vous convient. Fermez les yeux et accordez-vous ce moment de paix.`, textRatio: 0.4, pauseAfter: 4 },
      { type: 'breathing', content: `Portez votre attention sur votre respiration naturelle, sans chercher √† la modifier. Observez simplement l'air qui entre et qui sort. √Ä chaque expiration, rel√¢chez un peu plus les tensions de votre journ√©e.`, textRatio: 0.3, pauseAfter: 12 },
      { type: 'body_scan', content: `Maintenant, parcourez votre corps avec bienveillance. Commencez par le sommet de votre t√™te, d√©tendez votre front, vos yeux, votre m√¢choire. Puis vos √©paules, vos bras, votre poitrine, votre ventre, vos hanches, vos jambes et vos pieds.`, textRatio: 0.3, pauseAfter: 15 },
      { type: 'visualization', content: `Imaginez-vous dans votre lieu de paix personnel. Un endroit o√π vous vous sentez parfaitement en s√©curit√© et d√©tendu. Explorez ce lieu avec tous vos sens. Ressentez la tranquillit√© qu'il vous apporte.`, textRatio: 0.3, pauseAfter: 18 },
      { type: 'conclusion', content: `Il est maintenant temps de revenir doucement. Prenez conscience de votre corps, de votre respiration. Bougez d√©licatement vos mains et vos pieds. Quand vous vous sentez pr√™t, ouvrez doucement les yeux. Emportez avec vous cette sensation de calme.`, textRatio: 0.4, pauseAfter: 3 }
    ];
  } else {
    // M√©ditation longue : plus de pauses contemplatives
    template = [
      { type: 'intro', content: `Bienvenue dans cette m√©ditation de ${duration} minutes. Prenez le temps de vous installer confortablement. Fermez les yeux et laissez-vous guider dans ce voyage int√©rieur vers la paix et la s√©r√©nit√©.`, textRatio: 0.3, pauseAfter: 6 },
      { type: 'breathing', content: `Commen√ßons par nous connecter √† notre respiration. Observez le rythme naturel de votre souffle. Sentez l'air frais qui entre par vos narines et l'air chaud qui en ressort. Laissez votre respiration devenir votre ancre dans l'instant pr√©sent.`, textRatio: 0.25, pauseAfter: 20 },
      { type: 'body_scan', content: `Maintenant, explorons votre corps avec attention et bienveillance. Commencez par le sommet de votre cr√¢ne. D√©tendez chaque muscle de votre visage, rel√¢chez vos √©paules, lib√©rez vos bras. Sentez votre poitrine s'ouvrir, votre ventre se d√©tendre. Rel√¢chez vos hanches, vos cuisses, vos mollets, jusqu'√† la pointe de vos orteils.`, textRatio: 0.25, pauseAfter: 25 },
      { type: 'visualization', content: `Visualisez maintenant votre sanctuaire int√©rieur. Un lieu unique qui n'appartient qu'√† vous, o√π r√®gnent la paix et l'harmonie. Explorez ce lieu magique, ressentez sa beaut√©, sa tranquillit√©. Laissez-vous impr√©gner par l'√©nergie apaisante de cet espace sacr√©.`, textRatio: 0.25, pauseAfter: 30 },
      { type: 'conclusion', content: `Notre voyage touche √† sa fin. Revenez progressivement √† votre corps physique, √† votre respiration. Emportez avec vous la paix et la s√©r√©nit√© que vous venez de cultiver. Bougez doucement vos membres, et quand vous vous sentez pr√™t, ouvrez les yeux avec un sourire.`, textRatio: 0.3, pauseAfter: 4 }
    ];
  }
  
  // Calculer les dur√©es r√©elles pour respecter la dur√©e totale
  const totalTextTime = template.reduce((sum, seg) => {
    const words = seg.content.split(/\s+/).length;
    const textDuration = (words / 120) * 60; // 120 mots/minute pour m√©ditation
    return sum + textDuration;
  }, 0);
  
  const totalPauseTime = template.reduce((sum, seg) => sum + seg.pauseAfter, 0);
  const totalPlannedTime = totalTextTime + totalPauseTime;
  
  // Ajuster les pauses si n√©cessaire pour respecter la dur√©e totale
  const adjustmentRatio = totalDurationSeconds / totalPlannedTime;
  
  console.log(`üìä Dur√©e planifi√©e: ${Math.round(totalPlannedTime)}s, Dur√©e cible: ${totalDurationSeconds}s, Ratio: ${adjustmentRatio.toFixed(2)}`);
  
  return template.map(seg => ({
    ...seg,
    pauseAfter: Math.max(1, Math.round(seg.pauseAfter * adjustmentRatio))
  }));
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { duration, prompt, voiceId, background, guidance, goal, gender } = meditationSchema.parse(body);

    console.log(`üßò Starting meditation generation with AI Agent: ${duration}min, goal: ${goal}, voice: ${voiceId}, background: ${background}, guidance: ${guidance}`);

    // Utiliser l'Agent IA pour une g√©n√©ration optimis√©e
    const aiAgent = new MeditationAIAgent();
    
    const meditationRequest = {
      prompt: `Create a ${duration}-minute ${goal} meditation. ${prompt}. Provide ${guidance} guidance. Use a ${gender} voice.`,
      duration,
      voiceGender: gender,
      voiceStyle: 'calm',
      goal,
      language: 'fr-FR',
      userId: 1
    };

    console.log('üß† Generating meditation with AI Agent...');
    const result = await aiAgent.generateOptimizedMeditation(meditationRequest);
    
    if (!result.success) {
      throw new Error(`AI Agent generation failed: ${result.errors?.join(', ')}`);
    }

    console.log('‚úÖ AI Agent generated meditation successfully');
    console.log(`üí∞ Cost: $${result.actualCost.toFixed(4)}`);
    console.log(`‚ôªÔ∏è Reused: ${result.segmentsReused}/${result.segmentsReused + result.segmentsCreated} segments (${Math.round(result.optimizationAchieved * 100)}%)`);
    console.log(`‚ö° Optimization achieved: ${(result.optimizationAchieved * 100).toFixed(1)}%`);

    // Fallback : si l'Agent IA √©choue, utiliser la m√©thode optimis√©e
    if (!result.audioUrl) {
      console.log('üîß Falling back to optimized generation...');
      
      const optimizedSegments = generateOptimizedSegments(duration, goal);
      
      console.log(`üîß Prepared ${optimizedSegments.length * 2} segments for assembly`);
      console.log(`üé§ Using voice ID for generation: ${voiceId} (${gender})`);

      // Convertir en format attendu par generateConcatenatedMeditation
      const segments: Array<{ type: "text"; content: string } | { type: "pause"; duration: number }> = [];
      
      optimizedSegments.forEach((seg, index) => {
        // Ajouter le segment de texte
        segments.push({
          type: "text",
          content: seg.content
        });
        
        // Ajouter la pause apr√®s (sauf pour le dernier segment)
        if (index < optimizedSegments.length - 1 || seg.pauseAfter > 2) {
          segments.push({
            type: "pause",
            duration: seg.pauseAfter
          });
        }
      });

      const audioStream = await generateConcatenatedMeditation(
        segments,
        voiceId,
        gender
      );

      console.log('‚úÖ Complete meditation generation with optimized segments successful');

      return new Response(audioStream, {
        headers: {
          "Content-Type": "audio/mpeg",
          "Content-Disposition": `attachment; filename="meditation_${goal}_${duration}min.mp3"`,
        },
      });
    }

    // Si l'Agent IA a r√©ussi, retourner son r√©sultat
    if (result.audioUrl) {
      const audioResponse = await fetch(result.audioUrl);
      if (audioResponse.ok && audioResponse.body) {
        return new Response(audioResponse.body, {
          headers: {
            "Content-Type": "audio/mpeg",
            "Content-Disposition": `attachment; filename="meditation_${goal}_${duration}min.mp3"`,
          },
        });
      }
    }

    throw new Error('No audio generated');

  } catch (error) {
    console.error("‚ùå Meditation generation error:", error);
    return NextResponse.json(
      { 
        error: "Failed to generate meditation", 
        details: error instanceof Error ? error.message : "Unknown error" 
      },
      { status: 500 }
    );
  }
} 